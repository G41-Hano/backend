# Generated by Django 5.1.7 on 2025-05-29 11:24

import datetime
from django.db import migrations, models
from ..utils.encryption import encrypt, decrypt

def encrypt_existing_points(apps, schema_editor):
    # Get the historical model. Replace 'your_app_name' with your actual app name.
    DrillResult = apps.get_model('api', 'DrillResult')
    db_alias = schema_editor.connection.alias

    for result in DrillResult.objects.using(db_alias).all():
        if result.points is not None:
            # Read from the old float 'points' field
            encrypted_data = encrypt(str(result.points))
            # Write to the new binary '_points_encrypted_temp' field
            result._points_encrypted_temp = encrypted_data
            result.save(update_fields=['_points_encrypted_temp']) # Only save the new field

def decrypt_points_reverse(apps, schema_editor):
    # Get the historical model. Replace 'your_app_name' with your actual app name.
    DrillResult = apps.get_model('api', 'DrillResult')
    db_alias = schema_editor.connection.alias

    for result in DrillResult.objects.using(db_alias).all():
        if result._points_encrypted_temp:
            # Read from the new binary '_points_encrypted_temp' field
            decrypted_data = decrypt(result._points_encrypted_temp)
            # Write back to the old float 'points' field
            result.points = float(decrypted_data)
            result.save(update_fields=['points']) # Only save the old field

class Migration(migrations.Migration):

    dependencies = [
        ('api', '0049_merge_20250529_1924'),
    ]

    operations = [
        migrations.AddField(
            model_name='drillresult',
            name='_points_encrypted_temp',
            field=models.BinaryField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='passwordreset',
            name='expires_at',
            field=models.DateTimeField(default=datetime.datetime(2025, 5, 29, 12, 24, 32, 809319, tzinfo=datetime.timezone.utc)),
        ),
        migrations.RunPython(encrypt_existing_points, decrypt_points_reverse),
    ]
