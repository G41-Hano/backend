# Generated by Django 5.1.7 on 2025-10-01 08:52

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='badges/')),
                ('points_required', models.IntegerField(blank=True, null=True)),
                ('is_first_drill', models.BooleanField(default=False)),
                ('drills_completed_required', models.IntegerField(blank=True, null=True)),
                ('correct_answers_required', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['points_required'],
            },
        ),
        migrations.CreateModel(
            name='PasswordReset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('token', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(default=datetime.datetime(2025, 10, 1, 9, 52, 4, 545077, tzinfo=datetime.timezone.utc))),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name_encrypted', models.BinaryField(null=True)),
                ('last_name_encrypted', models.BinaryField(null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('total_points', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('badges', models.ManyToManyField(blank=True, related_name='users', to='api.badge')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_code', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('is_hidden', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('students', models.ManyToManyField(blank=True, related_name='enrolled_classrooms', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classrooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Drill',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('deadline', models.DateTimeField()),
                ('total_run', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=10)),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drills', to='api.classroom')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drills', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BlankBustersQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('M', 'Smart Select'), ('F', 'Blank Busters'), ('D', 'Sentence Builder'), ('P', 'Picture Word'), ('G', 'Memory Game')], default='S', max_length=1)),
                ('text', models.CharField(max_length=200)),
                ('word', models.CharField(blank=True, max_length=255, null=True)),
                ('definition', models.TextField(blank=True, null=True)),
                ('letterChoices', models.JSONField(blank=True, null=True)),
                ('answer', models.CharField(blank=True, max_length=200, null=True)),
                ('pattern', models.CharField(blank=True, max_length=200, null=True)),
                ('hint', models.TextField(blank=True, null=True)),
                ('drill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_questions', to='api.drill')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DrillChoice',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('text', models.CharField(blank=True, max_length=200)),
                ('image', models.ImageField(blank=True, null=True, upload_to='drill_choices/images/')),
                ('video', models.FileField(blank=True, null=True, upload_to='drill_choices/videos/')),
                ('is_correct', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='DrillResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('run_number', models.IntegerField(verbose_name=4)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('completion_time', models.DateTimeField()),
                ('_points_encrypted', models.BinaryField(blank=True, null=True)),
                ('drill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drill_results', to='api.drill')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drill_results', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MemoryGameQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('M', 'Smart Select'), ('F', 'Blank Busters'), ('D', 'Sentence Builder'), ('P', 'Picture Word'), ('G', 'Memory Game')], default='S', max_length=1)),
                ('text', models.CharField(max_length=200)),
                ('word', models.CharField(blank=True, max_length=255, null=True)),
                ('definition', models.TextField(blank=True, null=True)),
                ('memoryCards', models.JSONField(blank=True, default=list, null=True)),
                ('drill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_questions', to='api.drill')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MemoryGameResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('attempts', models.IntegerField(default=0)),
                ('matches', models.JSONField(default=list)),
                ('time_taken', models.FloatField()),
                ('score', models.FloatField()),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('drill_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memory_game_results', to='api.drillresult')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('student_transfer', 'Student Transfer Request'), ('transfer_approved', 'Transfer Approved'), ('transfer_rejected', 'Transfer Rejected'), ('student_added', 'Student Added to Classroom'), ('student_removed', 'Student Removed from Classroom'), ('badge_earned', 'Badge Earned')], max_length=20)),
                ('message', models.TextField()),
                ('data', models.JSONField(default=dict)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PictureWordQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('M', 'Smart Select'), ('F', 'Blank Busters'), ('D', 'Sentence Builder'), ('P', 'Picture Word'), ('G', 'Memory Game')], default='S', max_length=1)),
                ('text', models.CharField(max_length=200)),
                ('word', models.CharField(blank=True, max_length=255, null=True)),
                ('definition', models.TextField(blank=True, null=True)),
                ('pictureWord', models.JSONField(blank=True, default=list, null=True)),
                ('answer', models.CharField(blank=True, max_length=200, null=True)),
                ('drill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_questions', to='api.drill')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('student', 'Student'), ('teacher', 'Teacher')], default='student', max_length=10)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='role', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SentenceBuilderQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('M', 'Smart Select'), ('F', 'Blank Busters'), ('D', 'Sentence Builder'), ('P', 'Picture Word'), ('G', 'Memory Game')], default='S', max_length=1)),
                ('text', models.CharField(max_length=200)),
                ('word', models.CharField(blank=True, max_length=255, null=True)),
                ('definition', models.TextField(blank=True, null=True)),
                ('sentence', models.TextField(blank=True, null=True)),
                ('dragItems', models.JSONField(blank=True, default=list, null=True)),
                ('incorrectChoices', models.JSONField(blank=True, default=list, null=True)),
                ('drill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_questions', to='api.drill')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SmartSelectQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('M', 'Smart Select'), ('F', 'Blank Busters'), ('D', 'Sentence Builder'), ('P', 'Picture Word'), ('G', 'Memory Game')], default='S', max_length=1)),
                ('text', models.CharField(max_length=200)),
                ('word', models.CharField(blank=True, max_length=255, null=True)),
                ('definition', models.TextField(blank=True, null=True)),
                ('answer', models.CharField(blank=True, max_length=200, null=True)),
                ('drill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_questions', to='api.drill')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransferRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('from_classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_transfers', to='api.classroom')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_requests_made', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_requests', to=settings.AUTH_USER_MODEL)),
                ('to_classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_transfers', to='api.classroom')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WordList',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_word_lists', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Vocabulary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=20)),
                ('definition', models.CharField(max_length=200)),
                ('image_url', models.URLField(max_length=500, null=True)),
                ('video_url', models.URLField(max_length=500, null=True)),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='words', to='api.wordlist')),
            ],
        ),
        migrations.AddField(
            model_name='drill',
            name='custom_wordlist',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drills', to='api.wordlist'),
        ),
        migrations.CreateModel(
            name='QuestionResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('submitted_answer', models.JSONField(blank=True, null=True)),
                ('is_correct', models.BooleanField(default=False)),
                ('time_taken', models.FloatField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('points_awarded', models.FloatField(default=0)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('drill_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_results', to='api.drillresult')),
            ],
            options={
                'unique_together': {('drill_result', 'content_type', 'object_id')},
            },
        ),
    ]
